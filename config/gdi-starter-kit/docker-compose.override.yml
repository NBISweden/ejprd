services:
  #oidc:
  #  extra_hosts: !override []  # Don’t rely on Docker internals
  #  networks:
  #    - oidc
  #  healthcheck:
  #    test: python3 -c 'import requests; print(requests.get(url = "https://localhost:8080/jwk", verify="/shared/cert/ca.crt").text)' || exit 1
  #  restart: no

  auth:
    extra_hosts: !override []  # Don’t rely on Docker internals
    networks:
      - oidc
    environment:
      - OIDC_PROVIDER=https://login.elixir-czech.org/oidc/
      - OIDC_JWKPATH=/jwk
      - OIDC_REDIRECTURL=https://login.ejprd.nbis.se/oidc/login


  rabbitmq:
    user: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
    restart: no
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    ports: !override []

  postgres:
    healthcheck:
      test: pg_isready -h localhost -U postgres
    restart: no

  s3:
    healthcheck:
      test: curl -fq http://localhost:9000/minio/health/live
    restart: no
    ports: !override []
    environment:
      - SERVER_JWTPUBKEYURL=https://login.elixir-czech.org/oidc/jwk


  s3inbox:
    environment:
      - SERVER_JWTPUBKEYURL=https://login.elixir-czech.org/oidc/jwk
      - LOG_LEVEL=debug
    extra_hosts: !override []  # Don’t rely on Docker internals
    networks:
      - oidc
      - public
      - secure
    ports:
      - "8000:8000"
    restart: always
    volumes:
      - ${CONFIG_FILEPATH}:/config.yaml
      - shared:/shared

  download:
    environment:
      - OIDC_CONFIGURATION_URL=https://login.elixir-czech.org/oidc/.well-known/openid-configuration
    extra_hosts: !override []  # Don’t rely on Docker internals
    networks:
      - oidc  # This network replaces Docker internals
    restart: no
    ports: !override
      - ${GDI_DOWNLOADS_PORT:-8443}:8443

  credentials:
    build:  # Restarting this container is really slow when it needs to install packages
      context: .
      dockerfile_inline: |
        FROM python:3.10-slim
        RUN apt-get -o DPkg::Lock::Timeout=60 update >/dev/null
        RUN apt-get -o DPkg::Lock::Timeout=60 install -y curl jq postgresql-client openssl >/dev/null
        RUN pip install --upgrade pip > /dev/null
        RUN pip install aiohttp Authlib joserfc requests > /dev/null
    image: credentials
    restart: no

  data_loader:
    depends_on:
      - ingest
      - verify
      - mapper
      - finalize
      - s3inbox
      - download
    restart: no
    volumes: !override
      - ./config/load_data.sh:/load_data.sh
      - ./s3cmd.conf:/s3cmd.conf
      - ../../data/:/data/
      - ./starter-kit-storage-and-interfaces/scripts/sda-admin:/sda-admin
      - ./config/sda-cli:/sda-cli
      - shared:/shared
      - cacert:/cacert
    networks:
      - oidc  # This network replaces Docker internals
    environment:
      - MQ_CREDENTIALS=${rabbitmq_MQ_USER}:${rabbitmq_MQ_PASSWORD}

  finalize:
    restart: no

  reencrypt:
    restart: no

  mapper:
    restart: no

  verify:
    restart: no

  ingest:
    restart: no

  htsget:
    extra_hosts: !override []  # Don’t rely on Docker internals
    depends_on:
      - download
      - reencrypt
    networks:
      - secure # This network replaces Docker internals
    volumes:
      - ./config:/config/
    ports: !override
      - ${GDI_HTSGET_PORT:-8088}:8080

  htsgetDecrypt:
    image: harbor.nbis.se/gdi/htsget-rs:20240415
    command: ["htsget-actix", "--config", "/config/decrypt-config.toml"]
    container_name: htsgetDecrypt
    depends_on:
      - download
      - reencrypt
    ports:
      - ${GDI_HTSGETDECRYPT_PORT:-8089}:8080
    environment:
      - FORMATTING_STYLE=Pretty
      - RUST_LOG=debug
    networks:
      - secure # This network replaces Docker internals
    volumes:
      - ./config:/config
      - certs:/certs

  success:
    image: hello-world
    depends_on:
      data_loader:
        condition: service_completed_successfully
      htsget:
        condition: service_started

  beacon:
    networks:
      - secure
      - public
    ports:
      - "5050:5050"

  db:
    ports:
      - 27019:27017
    volumes:
      - beacondb:/data/db/
    networks:
      - secure

  funnel:
    networks:
      - secure
      - public
    ports:
      - ${GDI_CONTCOMP_PORT:-8111}:8000

volumes:
  rabbitmq:
  beacondb:

networks:
  oidc:  # Persistent networks can be added to the docker host and referenced here 
    name: ejprd-oidc
    external: true
  public:
    name: ejprd-public
    external: true
  secure:
    name: ejprd-secure
    external: true
