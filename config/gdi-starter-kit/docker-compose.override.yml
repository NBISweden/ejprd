services:
  oidc:
    extra_hosts: !override []  # Don’t rely on Docker internals
    networks:
      - oidc
    healthcheck:
      test: python3 -c 'import requests; print(requests.get(url = "https://localhost:8080/jwk", verify="/shared/cert/ca.crt").text)' || exit 1
    restart: no

  rabbitmq:
    user: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
    restart: no
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    ports: !override []

  postgres:
    healthcheck:
      test: pg_isready -h localhost -U postgres
    restart: no

  s3:
    healthcheck:
      test: curl -fq http://localhost:9000/minio/health/live
    restart: no
    ports: !override []

  s3inbox:
    depends_on:
      oidc:
        condition: service_healthy
    environment:
      - SERVER_JWTPUBKEYURL=https://oidc:8080/jwk
    extra_hosts: !override []  # Don’t rely on Docker internals
    networks:
      - oidc  # This network replaces Docker internals
    restart: no
    ports: !override []

  download:
    environment:
      - OIDC_CONFIGURATION_URL=https://oidc:8080/.well-known/openid-configuration
    extra_hosts: !override []  # Don’t rely on Docker internals
    networks:
      - oidc  # This network replaces Docker internals
    restart: no
    depends_on:
      - data_loader
    ports: !override
      - ${GDI_DOWNLOADS_PORT:-8443}:8443

  credentials:
    build:  # Restarting this container is really slow when it needs to install packages
      context: .
      dockerfile_inline: |
        FROM python:3.10-slim
        RUN apt-get -o DPkg::Lock::Timeout=60 update >/dev/null
        RUN apt-get -o DPkg::Lock::Timeout=60 install -y curl jq postgresql-client openssl >/dev/null
        RUN pip install --upgrade pip > /dev/null
        RUN pip install aiohttp Authlib joserfc requests > /dev/null
    image: credentials
    restart: no

  data_loader:
    depends_on:
      - ingest
      - verify
    restart: no

  finalize:
    restart: no

  reencrypt:
    restart: no

  mapper:
    restart: no

  verify:
    restart: no

  ingest:
    restart: no

  htsget:
    extra_hosts: !override []  # Don’t rely on Docker internals
    depends_on:
      - download
    networks:
      - secure # This network replaces Docker internals
    volumes:
      - ./config:/config/
    ports: !override
      - ${GDI_HTSGET_PORT:-8088}:8080

  success:
    image: hello-world
    depends_on:
      data_loader:
        condition: service_completed_successfully
      htsget:
        condition: service_started

  beacon:
    image: harbor.nbis.se/test/ejprd-gdi-beacon:1
    networks:
      - secure
      - public
    depends_on:
      - db
    ports:
      - "5050:5050"
    working_dir: '/beacon'
    entrypoint: ['python','-m','beacon']
    volumes:
      - ./config/beacon_conf.py:/beacon/beacon/conf.py
      - ./config/datasets.yml:/beacon/request/datasets.yml
      - ./config/cohorts.yml:/beacon/request/cohorts.yml
      - ./config/public_datasets.yml:/beacon/permissions/public_datasets.yml
      - ./config/beacon.env:/beacon/permissions/permissions-ui/.env

  db:
    image: mongo:5
    hostname: mongo
    ports:
      - 27019:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: beacon
    volumes:
      - ./mongo-init/:/docker-entrypoint-initdb.d/:ro
      - ../../data/beaconized/:/docker-entrypoint-initdb.d/:ro
      - ./config/beacondb/:/data/db/
    networks:
      - secure

volumes:
  rabbitmq:

networks:
  oidc:  # Persistent networks can be added to the docker host and referenced here 
    name: ejprd-oidc
    external: true
  public:
    name: ejprd-public
    external: true
  secure:
    name: ejprd-secure
    external: true
